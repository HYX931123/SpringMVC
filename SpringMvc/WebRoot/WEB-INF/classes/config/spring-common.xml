<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/tx 
  	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
  http://www.springframework.org/schema/aop 
  	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
  	http://www.springframework.org/schema/context
  	http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  	
	<!-- 引入jdbc配置文件 -->    
    <context:property-placeholder location="classpath:jdbc.properties" />
		
	<!-- 
		1. 配置数据源 : DriverManagerDataSource
	-->
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.microsoft.sqlserver.jdbc.SQLServerDriver" />
		<property name="url" value="jdbc:sqlserver://188.188.5.27:1433;DatabaseName=test" />
		<property name="username" value="sa" />
		<property name="password" value="job36" />
	</bean>
	
	<!--
		2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源
		MyBatis定义数据源,同意加载配置
	-->
	  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"></property>
    	<!-- <property name="configLocation" value="config:mybatis-config.xml"/> -->
    	<property name="configLocation" value="classpath:config/mybatis-config.xml"/>
    	<!-- 自动扫描mapper目录, 省掉mybatis-config.xml里的手工配置 -->
	    <property name="mapperLocations">
	      <list>
	        <value>classpath:com/cnpay/mapper/*.xml</value>
	      </list>
	    </property>
	  </bean>
	
	<!--
		3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory

		basePackage:指定sql映射文件/接口所在的包（自动扫描）
	-->
	 <!-- 通过扫描的模式，扫描目录在com/login/mapper目录下 -->
	  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.cnpay.mapper" />
	    <!-- <property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory" /> -->
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	  </bean>
	  
	
	<!--
		4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
	-->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 5. 使用声明式事务
		 transaction-manager：引用上面定义的事务管理器
	 -->
	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.cnpay.serviceImpl" />
	<!-- 启用注解配置 -->
	<context:annotation-config />
	<!-- 使用事务注解 -->
	<tx:annotation-driven />
	
	
	 <tx:advice id="txAdvice" transaction-manager="txManager">
	    <tx:attributes>
	      <tx:method name="ins*" propagation="NOT_SUPPORTED" rollback-for="Exception"/>
	      <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
	      <tx:method name="up*" propagation="REQUIRED" rollback-for="Exception"/>
	      <tx:method name="approve" propagation="REQUIRED" rollback-for="Exception"/>
	      <tx:method name="undo" propagation="REQUIRED" rollback-for="Exception"/>
	      <tx:method name="load*" read-only="true" />
	      <tx:method name="get*" read-only="true" />
	      <tx:method name="search*" read-only="true" />
	      <tx:method name="*" read-only="true" />
	    </tx:attributes>
  	</tx:advice> 
  	
  	
	   <aop:config>
	    <aop:pointcut id="serviceMethod" expression="execution(* com.cnpay.serviceImpl.*.*(..))" />
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
	  </aop:config> 
	  
	 
	
</beans>